podDisruptionBudget:
  enabled: true
service:
  enabled: true
  headlessService: true
serviceAccount:
  create: true
deployment:
  enabled: false
statefulSet:
  enabled: true
  annotations:
    deploy.annotations.example.com/name: deploy
  labels:
    deploy.labels.example.com/name: deploy
  replicas: 2

  serviceAccount:
    enabled: true
    name: test-example-sa

  tolerations:
  - key: "node-role.kubernetes.io/on-demand"
    operator: "Equal"
    value: "true"
    effect: "PreferNoSchedule"

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: k8s-node-role/services-worker
            operator: In
            values:
            - "true"
          - key: dedicated
            operator: In
            values:
            - "general-purpose"
      preferredDuringSchedulingIgnoredDuringExecution:
      - preference:
          matchExpressions:
          - key: k8s-node-role/spot-worker
            operator: In
            values:
            - "true"
        weight: 100
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - "example-app"
          topologyKey: topology.kubernetes.io/zone

  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchExpressions:
        - key: disktype
          operator: In
          values:
          - ssd

  securityContext:
    fsGroup: 2000

  containerSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
  dnsPolicy: ClusterFirstWithHostNet
  # shareProcessNamespace: false

  dnsConfig:
    options:
    - name: single-request-reopen

  containerPorts:
  - name: metrics
    port: 9000
  - name: grpc
    port: 5000

  initContainers:
  - name: init-mydb
    image: alpine:1.28
    command: ['sh', '-c', "until nslookup mydb.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mydb; sleep 2; done"]
    resources:
      requests:
        cpu: 50m
        memory: 100Mi
      limits:
        cpu: 100m
        memory: 200Mi

  sidecar:
  - name: sidecar-contaner
    image: busybox:v1.0.0
    imagePullPolicy: IfNotPresent
    command: ['/bin/sh']
    env:
      - name: FOO
        value: BAR
      - name: FIZZ
        value: BUZZ
    resources:
      requests:
        cpu: 50m
        memory: 100Mi
      limits:
        cpu: 100m
        memory: 200Mi
    livenessProbe:
      httpGet:
        path: /healthz-no-downstream
        port: http
    readinessProbe:
      httpGet:
        path: /healthz
        port: 8080

  resources:
    requests:
      cpu: 50m
      memory: 100Mi
    limits:
      cpu: 100m
      memory: 200Mi

  ## envMap
  envMap: 
    envMapKey:
      value: envMapValue
    foo:
      value: bar
    foo1:
      valueFrom:
        configMapKeyRef:
          name: configmap-name
          key: configMapKey
    foo2:
      valueFrom:
        secretKeyRef:
          name: secret-name
          key: secretKey

  # list of environment variables
  envVariables:
  - name: FOO
    value: "bar"
  - name: BUZZ
    value: "fizz"

  # list of secret environment variables
  # variable   - name of env variable inside container
  # secretName - name of kubernetes secret object
  # secretKey  - name of the key in secret object which holds the value
  envSecrets:
  - variable: MYSQL_PASSWORD
    secretName: databases-secrets
    secretKey: mysql-password
  - variable: JWT
    secretName: web-tokens
    secretKey: jwt

  envConfigMaps:
  - variable: MYSQL_HOST
    configMapName: mysql-config
    configMapKey: host

  livenessProbe:
    httpGet:
      path: /healthz
      port: 8080
    failureThreshold: 30
    periodSeconds: 10

  readinessProbe:
    exec:
      command:
      - cat
      - /tmp/healthy
    initialDelaySeconds: 5
    periodSeconds: 5

  startupProbe:
    tcpSocket:
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 10


  # Ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
  lifecycle:
    preStop:
      exec:
        command: ["/bin/sh", "-c", "sleep 5; nginx -c /etc/nginx/nginx.conf -s quit; while pgrep -x nginx; do sleep 1; done"]

  # list of volumeMounts in original k8s format.
  volumeMounts:
  - name: foo
    mountPath: "/etc/foo"
    readOnly: true

  volumeClaimTemplates:
    www: 
      accessModes: "ReadWriteOnce"
      storageClassName: "my-storage-class"
      requestsStorage: 1Gi
      mountPath: /usr/share/nginx/html

  # list of volumes in original k8s format.
  volumes:
  - name: foo
    configMap:
      name: '{{ template "app.name" . }}-configmap-nameSuffix'
  - name: foo2
    secret:
      secretName: mysecret
  - name: bar
    emptyDir: {}
